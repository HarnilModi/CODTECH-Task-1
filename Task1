import re
import hashlib
import requests

common_passwords = ["123456", "password", "12345", "12345678", "qwerty", "abc123", "password1"]

def check_password_breach(password):
    sha1_hash = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    prefix, suffix = sha1_hash[:5], sha1_hash[5:]
    url = f"https://api.pwnedpasswords.com/range/{prefix}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        hashes = {line.split(":")[0]: int(line.split(":")[1]) for line in response.text.splitlines()}
        if suffix in hashes:
            return True, hashes[suffix]
        return False, 0
    except requests.exceptions.RequestException:
        return False, 0

def calculate_entropy(password):
    charset_size = 0
    if re.search(r'[a-z]', password):
        charset_size += 26
    if re.search(r'[A-Z]', password):
        charset_size += 26
    if re.search(r'[0-9]', password):
        charset_size += 10
    if re.search(r'[\W_]', password):
        charset_size += 32
    entropy = len(password) * (charset_size).bit_length()
    return entropy

def check_password_strength(password):
    score = 0
    feedback = []

    if len(password) < 12:
        feedback.append("Weak: Password must be at least 12 characters long.")
    else:
        score += 2

    if password in common_passwords:
        feedback.append("Weak: This is a common password.")
        return feedback, score

    if not re.search(r'[A-Z]', password):
        feedback.append("Moderate: Password must include at least one uppercase letter.")
    else:
        score += 1

    if not re.search(r'[a-z]', password):
        feedback.append("Moderate: Password must include at least one lowercase letter.")
    else:
        score += 1

    if not re.search(r'[0-9]', password):
        feedback.append("Moderate: Password must include at least one number.")
    else:
        score += 1

    if not re.search(r'[\W_]', password):
        feedback.append("Moderate: Password must include at least one special character.")
    else:
        score += 2

    if re.search(r"(password|1234|letmein)", password, re.IGNORECASE):
        feedback.append("Weak: Password contains easily guessable patterns.")

    breached, count = check_password_breach(password)
    if breached:
        feedback.append(f"Weak: This password has been breached {count} times in data leaks.")
        return feedback, score

    entropy = calculate_entropy(password)
    if entropy < 40:
        feedback.append("Weak: Password has low entropy and is predictable.")
    elif 40 <= entropy < 60:
        feedback.append("Moderate: Password has moderate entropy.")
    else:
        feedback.append("Strong: Password has high entropy.")
        score += 2

    if score < 5:
        feedback.append("Overall: Weak password.")
    elif 5 <= score < 8:
        feedback.append("Overall: Moderate password.")
    else:
        feedback.append("Overall: Strong password.")

    return feedback, score

password = input("Enter a password to check its strength: ")
feedback, score = check_password_strength(password)
print("\n".join(feedback))
print(f"Score: {score}/10")
